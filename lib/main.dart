/*
    From Alex: the main source file template is generated by Android Studio.

    A lot of assistance was taken from
      https://api.flutter.dev/flutter

*/


import 'package:flutter/material.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:http/http.dart' as http;
import 'dart:async';
import 'dart:convert';

void main() {
  runApp(const MyApp());
}

/* App itself is immutable widget - got it */
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Tinder Chuck!',
      theme: ThemeData(primarySwatch: Colors.grey),
      home: const MyHomePage(title: 'Tinder Chuck! Now on Flutter.'),
    );
  }
}

/* Home page, as an app's child, should have the state etc. - also got it */
class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final String url = 'https://api.chucknorris.io/jokes/random';
  final String msg = 'Chucknorris.io did not send the nudes.';
  final String btn = 'Swipe!';
  late Future<Joke> futureJoke;

  Future<Joke> getJoke() async {
    final http.Response response = await http.get(Uri.parse(url));
    if (response.statusCode == 200) {
      return Joke.fromJson(jsonDecode(response.body));
    } else {
      throw Exception(msg);
    }
  }

  @override
  void initState(){
    super.initState();
    futureJoke = getJoke();
  }

  void standUp() {
    setState(() {
      futureJoke = getJoke();
    });
  }

  // Redraws the page
  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called
    return SafeArea(
      top: true,
      child: Scaffold(
        // Top bar of page
        appBar: AppBar(title: Text(widget.title)),
        // Body of page
        body: Padding (
          padding: const EdgeInsets.all(20.0),
          child: Center(
            child: Column (
              children: <Widget>[
                Text(
                  '',
                  style: Theme.of(context).textTheme.headlineMedium,
                ),
                FutureBuilder<Joke>(
                  future: futureJoke,
                  builder: (BuildContext context, AsyncSnapshot<Joke> snapshot) {
                    if (snapshot.hasData) {
                      return Text(snapshot.data!.value);
                    } else if (snapshot.hasError) {
                      return Text('${snapshot.error}');
                    }
                    return Text(msg);
                  }
                ),
                TextButton(
                    onPressed: standUp,
                    style: TextButton.styleFrom(
                      backgroundColor: Colors.lime,
                      foregroundColor: Colors.black87
                    ),
                    child: Text(btn)
                )
              ],
            ),
          )
        ),
      )
    );
  }
}

// We know the format from URL
@JsonSerializable()
class Joke {
  @JsonKey(name: 'icon_url')
  final String iconUrl;
  @JsonKey(name: 'id')
  final String id;
  @JsonKey(name: 'created_at')
  final String createdAt;
  @JsonKey(name: 'updated_at')
  final String updatedAt;
  @JsonKey(name: 'url')
  final String url;
  @JsonKey(name: 'value')
  final String value;

  // Java-like constructors. Deja-vu.
  Joke(
      this.iconUrl,
      this.id,
      this.createdAt,
      this.updatedAt,
      this.url,
      this.value
      );

  // We need parsing only.
  // https://docs.flutter.dev/development/data-and-backend/json
  //  tells there's an error below until the 1st compilation.
  // factory Joke.fromJson(Map<String, dynamic> json) => _$JokeFromJson(json);

  // Ok, direct parsing only
  Joke.fromJson(Map<String, dynamic> json):
        iconUrl = json['icon_url'],
        id = json['id'],
        createdAt = json['created_at'],
        updatedAt = json['updated_at'],
        url = json['url'],
        value = json['value']
  ;

}